[{"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\index.js":"1","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\App.js":"2","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\WeatherData.js":"3","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\SingleDay.js":"4","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\FiveDay.js":"5","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\SearchBar.js":"6","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\openweatherapifiveday.js":"7","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\googleplaces.js":"8","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\openweatherapi.js":"9","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\googleautocomplete.js":"10","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\MySlider.js":"11","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\TempSymbol.js":"12"},{"size":218,"mtime":1612109532694,"results":"13","hashOfConfig":"14"},{"size":424,"mtime":1612813996521,"results":"15","hashOfConfig":"14"},{"size":8457,"mtime":1613031167271,"results":"16","hashOfConfig":"14"},{"size":4798,"mtime":1613027284309,"results":"17","hashOfConfig":"14"},{"size":1869,"mtime":1613027801717,"results":"18","hashOfConfig":"14"},{"size":1289,"mtime":1613062682355,"results":"19","hashOfConfig":"14"},{"size":128,"mtime":1612336235812,"results":"20","hashOfConfig":"14"},{"size":151,"mtime":1612250565208,"results":"21","hashOfConfig":"14"},{"size":127,"mtime":1612251153809,"results":"22","hashOfConfig":"14"},{"size":148,"mtime":1612165972490,"results":"23","hashOfConfig":"14"},{"size":3735,"mtime":1613032992928,"results":"24","hashOfConfig":"14"},{"size":250,"mtime":1612819746206,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4zt11u",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\index.js",[],["54","55"],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\App.js",["56"],"import React from 'react';\r\nimport WeatherData from './components/WeatherData';\r\nimport { Container } from 'semantic-ui-react'\r\n\r\nconst App = () => {\r\n\r\n  return(\r\n    <div className=\"ui grid container centered\">\r\n      <div className=\"sixteen wide mobile six wide computer column\">\r\n        <div className=\"maincontainer \">\r\n        <WeatherData />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default App;","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\WeatherData.js",["57","58","59","60","61","62","63","64"],"import React, {useEffect, useState} from 'react';\r\n// import _ from 'lodash';\r\n\r\nimport openweathermap from '../apis/openweatherapi';\r\nimport openweatherapifiveday from '../apis/openweatherapifiveday';\r\nimport googleautocomplete from '../apis/googleautocomplete';\r\nimport googleplaces from '../apis/googleplaces';\r\n\r\nimport SearchBar from './SearchBar';\r\nimport SingleDay from './SingleDay';\r\nimport FiveDay from './FiveDay';\r\n\r\nconst WeatherData = () => {\r\n\r\n  const [searchTerm, setSearchTerm] = useState('London');\r\n  const [debounceSearchTerm, setdebounceSearchTerm] = useState(searchTerm);\r\n\r\n  const [city, setCity] = useState('London');\r\n\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [lat, setLat] = useState('51.5074');\r\n  const [lon, setLon] = useState('0.1278');\r\n\r\n  const [weather, setWeather] = useState([]);\r\n  const [fiveDayWeather, setFiveDayWeather] = useState([]);\r\n  const [initialCurrentWeather , setInitialCurrentWeather] = useState({});\r\n\r\n  let codeArray = {\r\n    '01' : ['Sun.svg','linear-gradient( 125deg , rgba(238, 97, 35, 0.9), rgba(208, 74, 17, 0.2))'],\r\n    '02' : ['Cloudy-Sun.svg','linear-gradient( 125deg , rgba(238, 97, 35, 0.9), rgba(208, 74, 17, 0.2))'],\r\n    '03' : ['Cloud.svg','linear-gradient( 125deg , rgba(169, 177, 169, 0.9), rgba(169, 177, 169, 0.2))'],\r\n    '04' : ['Cloudy 2.svg', 'linear-gradient( 125deg , rgba(169, 177, 169, 0.9), rgba(169, 177, 169, 0.2))'],\r\n    '09' : ['Rain 3.svg','linear-gradient( 125deg , rgba(7, 168, 197, 0.9), rgba(7, 175, 134, 0.2))'],\r\n    '10' : ['Rain 4.svg','linear-gradient( 125deg , rgba(7, 168, 197, 0.9), rgba(7, 175, 134, 0.2))'],\r\n    '11' : 'Thunder cloudy.svg',\r\n    '13' : ['Snow.svg', 'linear-gradient( 125deg , rgba(169, 177, 169, 0.9), rgba(169, 177, 169, 0.2))'],\r\n    '50' : ['Wave.svg', 'linear-gradient( 125deg , rgba(7, 168, 197, 0.9), rgba(7, 175, 134, 0.2))']\r\n  }\r\n\r\n\r\n  const getListOfCities = async () => {\r\n    const response = await googleautocomplete.get('/', {\r\n      params: {\r\n        input: debounceSearchTerm,\r\n        types: '(cities)',\r\n        language: 'en',\r\n        key: 'AIzaSyBKNUpCDuQRcTCQWzWbpPnVdnFbY2TZ0pw',\r\n      }\r\n    })\r\n    const formattedResults = response.data.predictions.map(place => {\r\n      return {\r\n        title: place.description,\r\n        description: '',\r\n        image: '',\r\n        price: ''\r\n      }\r\n    })\r\n    setSearchResults(formattedResults)\r\n  }\r\n\r\n  const fetchGooglePlace = async () => {\r\n    const response = await googleplaces.get('/', {params: {\r\n      input: city,\r\n      inputtype: 'textquery',\r\n      fields: 'geometry',\r\n      key: 'AIzaSyBKNUpCDuQRcTCQWzWbpPnVdnFbY2TZ0pw',\r\n    }}).then((data) => {\r\n      let info = data.data.candidates[0].geometry.location;\r\n      setLat(info.lat)\r\n      setLon(info.lng)\r\n    }).catch(error => console.log(error.message))\r\n  }\r\n\r\n  const fetchWeather = async (lon, lat, exclude) => {\r\n    const response = await openweathermap.get('/', {params: {\r\n      lat: lat,\r\n      lon: lon,\r\n      exclude: exclude,\r\n      units: 'metric',\r\n      appid: 'e62dd17a4c10cec02ebada80e6844218',\r\n    }}).then((response) => {\r\n      let oneday = [];\r\n      response.data.hourly.map((hour, index) => {\r\n        if(index > 23) {\r\n          return;\r\n        }\r\n       return oneday.push(hour)\r\n      })\r\n\r\n      let sevenday = response.data.daily;\r\n      sevenday.splice(0,1);\r\n\r\n      // setWeather({...weather,\r\n      //   oneDayWeather: oneday,\r\n      //   sevenDayWeather: sevenday,\r\n      //   currentWeather: response.data.current\r\n      // })\r\n\r\n      setWeather(prevState => ({\r\n        ...prevState,\r\n        oneDayWeather: oneday,\r\n        sevenDayWeather: sevenday,\r\n        currentWeather: response.data.current\r\n      }))\r\n\r\n      setInitialCurrentWeather(response.data.current)\r\n\r\n    })\r\n  };\r\n\r\n  const fetchFiveDayWeather = async (city) => {\r\n\r\n    const response = await openweatherapifiveday.get('/', {params: {\r\n      q: city,\r\n      units: 'metric',\r\n      appid: 'e62dd17a4c10cec02ebada80e6844218',\r\n    }})\r\n    if(!weather) {\r\n      return;\r\n    }\r\n\r\n    setWeather(prevState => ({\r\n      ...prevState,\r\n      fiveDay : {...prevState['fiveDay'], 'data': response.data.list }\r\n    }))\r\n\r\n    // setWeather({...weather, fiveDay : response.data.list})\r\n  };\r\n\r\n \r\n\r\n  //for the debounce\r\n  useEffect(() => {\r\n    const timerId = setTimeout(() => {\r\n      setLoading(false)\r\n      setdebounceSearchTerm(searchTerm)\r\n    }, 1000);\r\n    return () => {\r\n      clearTimeout(timerId);\r\n      setLoading(true)\r\n    }\r\n  }, [searchTerm])\r\n\r\n  //for fetch the city autocomplete\r\n  useEffect(() => {\r\n    if(debounceSearchTerm) {\r\n      getListOfCities()\r\n    }\r\n  },[debounceSearchTerm] )\r\n\r\n  //for the city lat & long\r\n  useEffect(() => {\r\n    fetchGooglePlace();\r\n  }, [city])\r\n\r\n  //for the weather \r\n  useEffect(() => {\r\n    fetchWeather(lon, lat, 'minutely,alerts')\r\n    fetchFiveDayWeather(city)\r\n  }, [lon])\r\n\r\n  //for updating the weather \r\n  useEffect(() => {\r\n    if(weather.currentWeather) {\r\n      let weathericon = weather.currentWeather.weather[0].icon\r\n      console.log(weathericon.substr(0,2))\r\n      \r\n      let background = codeArray[weathericon.substr(0,2)][1]\r\n      let maincontainer = document.querySelector('.maincontainer')\r\n      maincontainer.style.background = `${background}, url(\"./images/bg2.png\");`\r\n      console.log(`${background}, url(\"./images/bg2.png\");`)\r\n    } \r\n  }, [weather, fiveDayWeather])\r\n\r\n\r\n  const deleteResults = () => {\r\n    setSearchResults('')\r\n  }\r\n  \r\n  const setCitySearch = (data) => {\r\n    setSearchTerm(data)\r\n  }\r\n\r\n  const handleCityChange = (data) => {    \r\n    setCity(data);\r\n  }\r\n\r\n  const toUpperCase = (phrase) => {\r\n\r\n    let arrayOfWords = phrase.split(' ');\r\n\r\n    let finalArray = [];\r\n    \r\n    for(let i = 0; i < arrayOfWords.length; i++) {\r\n      let wordsToStringArray = arrayOfWords[i].split('');\r\n      let capital =  wordsToStringArray[0].toUpperCase();\r\n      wordsToStringArray = wordsToStringArray.slice(1)\r\n      \r\n      wordsToStringArray = wordsToStringArray.join('')\r\n      let combine = capital + wordsToStringArray\r\n      finalArray.push(combine);\r\n    }\r\n\r\n    return finalArray.join(' ');\r\n  }\r\n\r\n  const getCurrentDay = (day) => {\r\n    let dayChange = unixTimeConverter(day);\r\n\r\n    if(!weather.sevenDayWeather) {\r\n      return ''\r\n    }\r\n    console.log(unixTimeConverter(initialCurrentWeather.dt))\r\n    console.log(dayChange)\r\n    weather.sevenDayWeather.forEach(item => {\r\n      if(unixTimeConverter(item.dt) === dayChange) {\r\n\r\n        setWeather(prevState => ({\r\n          ...prevState,\r\n          currentWeather : {...prevState['currentWeather'], ...item }\r\n        }))\r\n\r\n      } else if(unixTimeConverter(initialCurrentWeather.dt) === dayChange) {\r\n\r\n        setWeather(prevState => ({\r\n          ...prevState,\r\n          currentWeather : {...prevState['currentWeather'], ...initialCurrentWeather }\r\n        }))\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n  const unixTimeConverter = (time, minutes = false, sunrise = false, long = false) => {\r\n    const milliseconds = time * 1000 // 1575909015000\r\n\r\n    const dateObject = new Date(milliseconds)\r\n    var options = {\r\n      weekday: 'short',\r\n      day: \"2-digit\",\r\n      month: \"2-digit\",\r\n      year: \"2-digit\"\r\n    };\r\n    if(minutes === true) {\r\n      options = {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      }\r\n    };\r\n    if(sunrise === true) {\r\n      options = {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        second: \"2-digit\"\r\n      };\r\n    };\r\n\r\n    if(long === true) {\r\n      options = {\r\n        weekday: 'long',\r\n        day: \"2-digit\",\r\n        month: \"long\",\r\n      }\r\n    };\r\n\r\n\r\n\r\n    const humanDateFormat = dateObject.toLocaleString('en-GB', options) //2019-12-9 10:30:15\r\n    return humanDateFormat;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SearchBar loading={loading} value={searchTerm} onChange={setCitySearch} results={searchResults} deleteResults={deleteResults} setCity={handleCityChange}/>\r\n      <SingleDay data={weather.currentWeather} toUpperCase={toUpperCase} unixTimeConverter={unixTimeConverter} codeArray={codeArray}/>\r\n      <FiveDay data={weather.fiveDay} toUpperCase={toUpperCase}  sevenDayData={weather.sevenDayWeather} getCurrentDay={getCurrentDay} unixTimeConverter={unixTimeConverter} codeArray={codeArray}/>\r\n    </React.Fragment>\r\n    \r\n  )\r\n}\r\n\r\nexport default WeatherData;","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\SingleDay.js",["65","66","67","68","69"],"import React, {useEffect, useState, useRef} from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'; // ES6\r\n\r\nimport TempSymbol from './TempSymbol';\r\n\r\nconst SingleDay = ({data, unixTimeConverter, codeArray}) => {\r\n\r\n  const [dataHasChanged, setDataHasChanged] = useState(false);\r\n  const [weather, setWeather] = useState(data);\r\n  useEffect(() => {\r\n\r\n    setWeather(data)\r\n\r\n    if(previous !== data && previous !== undefined) {\r\n      setDataHasChanged(true);\r\n    }\r\n  }, [data])\r\n  \r\n  function usePrevious() {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n      ref.current = data\r\n    }, [data])\r\n\r\n    return ref.current\r\n  }\r\n  const previous = usePrevious(data);\r\n\r\n  const toUpperCase = (phrase) => {\r\n\r\n    let arrayOfWords = phrase.split(' ');\r\n    let combine;\r\n    let finalArray = [];\r\n    \r\n    for(let i = 0; i < arrayOfWords.length; i++) {\r\n      let wordsToStringArray = arrayOfWords[i].split('');\r\n      let capital =  wordsToStringArray[0].toUpperCase();\r\n      wordsToStringArray = wordsToStringArray.slice(1)\r\n      \r\n      wordsToStringArray = wordsToStringArray.join('')\r\n      let combine = capital + wordsToStringArray\r\n      finalArray.push(combine);\r\n    }\r\n\r\n    return finalArray.join(' ');\r\n  }\r\n\r\n  const renderFirstElements = (weather, style, temp) => {\r\n    return ( \r\n      <div className=\"first-segment\">\r\n          <div className=\"weather-icon\" style={style}></div>\r\n          <h3 className='weather-description'>{toUpperCase(weather.weather[0].description)}</h3>\r\n          {temp}\r\n          <h2 className='date'>{unixTimeConverter(weather.dt, false, false, true)}</h2>\r\n      </div>\r\n\r\n      \r\n    )\r\n  }\r\n  const renderSimilarElements = (weather) => {\r\n    return(\r\n      <div className=\"ui grid\">\r\n      <div className=\"info-icons four column row\">\r\n        <div className=\"column wind-speed\" >\r\n          <img src=\"/assets/SVG/Wind 2.svg\" alt=\"\"/>\r\n          <div className=\"wind-speed-data\">\r\n            {weather.wind_speed} \r\n          </div>\r\n        </div>\r\n        <div className=\"column humidity\">\r\n          <img src=\"/assets/SVG/Humidity.svg\" alt=\"\"/>\r\n          <div className=\"wind-speed-data\">\r\n            {weather.humidity} %\r\n          </div>\r\n        </div>\r\n        <div className=\"column sunrise\">\r\n          <img src=\"/assets/SVG/Sunrise2.svg\" alt=\"\"/>\r\n          <div className=\"sunrise-data\">\r\n            {unixTimeConverter(weather.sunrise, false, true)}\r\n          </div>\r\n        </div>\r\n        <div className=\"column sunset\">\r\n          <img src=\"/assets/SVG/Sunset2.svg\" alt=\"\"/>\r\n          <div className=\"sunset-data\">\r\n            {unixTimeConverter(weather.sunset, false, true)}\r\n          </div>\r\n        </div>\r\n      \r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n  const renderMinmax = () => {\r\n\r\n    if(!weather.temp.min) {\r\n      return;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n          <div className=\"two column row minmax-holder\">\r\n            <div className=\"column min-temp\">\r\n              <img src=\"/assets/SVG/Temperature down.svg\" alt=\"\"/>\r\n              <div className=\"temp-min-data\">\r\n                {weather.temp.min}&#176;\r\n              </div>\r\n            </div>\r\n            <div className=\"column max-temp\">\r\n              <img src=\"/assets/SVG/Temperature up.svg\" alt=\"\"/>\r\n              <div className=\"temp-max-data\">\r\n                {weather.temp.max}&#176;\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n  const whatToRender = () => {\r\n    if(!weather) {\r\n      return '';\r\n    }\r\n    let weatherCode = weather.weather[0].icon.substring(0,2);\r\n\r\n\r\n    const style = {\r\n      'backgroundImage': `url('/assets/SVG/${codeArray[weatherCode][0]}')`,\r\n      'backgroundSize' : 'contain',\r\n      'width' : '100%',\r\n      'height' : '150px',\r\n      'backgroundRepeat': 'no-repeat',\r\n      'backgroundPosition' : 'center'\r\n    }\r\n    if(!weather.temp.day) {\r\n      let temp = parseInt(weather.temp);\r\n      return (\r\n        <React.Fragment >\r\n          {renderFirstElements(weather, style, <TempSymbol temp={temp} />)}\r\n          \r\n          {renderSimilarElements(weather)}\r\n        </React.Fragment>\r\n      )\r\n    } else {\r\n      let temp = parseInt(weather.temp.day);\r\n\r\n      return(\r\n        <React.Fragment>\r\n          {renderFirstElements(weather, style, <TempSymbol temp={temp} />) }\r\n          {renderMinmax(weather)}\r\n\r\n\r\n          <CSSTransition\r\n          key={weather.dt}\r\n          timeout={{ enter: 200, exit: 300 }}\r\n          >\r\n          {renderSimilarElements(weather)}\r\n          </CSSTransition>\r\n\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"ui grid centered single-day\">\r\n\r\n      {whatToRender()}\r\n\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleDay;","C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\FiveDay.js",[],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\SearchBar.js",["70"],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\openweatherapifiveday.js",[],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\googleplaces.js",[],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\openweatherapi.js",[],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\apis\\googleautocomplete.js",[],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\MySlider.js",[],"C:\\Users\\Administrator\\Documents\\React\\weatherapp\\src\\components\\TempSymbol.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":19},{"ruleId":"75","severity":1,"message":"79","line":27,"column":26,"nodeType":"77","messageId":"78","endLine":27,"endColumn":43},{"ruleId":"75","severity":1,"message":"80","line":64,"column":11,"nodeType":"77","messageId":"78","endLine":64,"endColumn":19},{"ruleId":"75","severity":1,"message":"80","line":77,"column":11,"nodeType":"77","messageId":"78","endLine":77,"endColumn":19},{"ruleId":"81","severity":1,"message":"82","line":87,"column":11,"nodeType":"83","messageId":"84","endLine":87,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":151,"column":5,"nodeType":"87","endLine":151,"endColumn":25,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":156,"column":6,"nodeType":"87","endLine":156,"endColumn":12,"suggestions":"90"},{"ruleId":"85","severity":1,"message":"91","line":162,"column":6,"nodeType":"87","endLine":162,"endColumn":11,"suggestions":"92"},{"ruleId":"85","severity":1,"message":"93","line":175,"column":6,"nodeType":"87","endLine":175,"endColumn":31,"suggestions":"94"},{"ruleId":"75","severity":1,"message":"95","line":2,"column":9,"nodeType":"77","messageId":"78","endLine":2,"endColumn":24},{"ruleId":"75","severity":1,"message":"96","line":8,"column":10,"nodeType":"77","messageId":"78","endLine":8,"endColumn":24},{"ruleId":"85","severity":1,"message":"97","line":17,"column":6,"nodeType":"87","endLine":17,"endColumn":12,"suggestions":"98"},{"ruleId":"85","severity":1,"message":"99","line":23,"column":8,"nodeType":"87","endLine":23,"endColumn":14,"suggestions":"100"},{"ruleId":"75","severity":1,"message":"101","line":32,"column":9,"nodeType":"77","messageId":"78","endLine":32,"endColumn":16},{"ruleId":"75","severity":1,"message":"102","line":6,"column":10,"nodeType":"77","messageId":"78","endLine":6,"endColumn":24},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'setFiveDayWeather' is assigned a value but never used.","'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getListOfCities'. Either include it or remove the dependency array.","ArrayExpression",["105"],"React Hook useEffect has a missing dependency: 'fetchGooglePlace'. Either include it or remove the dependency array.",["106"],"React Hook useEffect has missing dependencies: 'city', 'fetchFiveDayWeather', and 'lat'. Either include them or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'codeArray'. Either include it or remove the dependency array.",["108"],"'TransitionGroup' is defined but never used.","'dataHasChanged' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'previous'. Either include it or remove the dependency array.",["109"],"React Hook useEffect has an unnecessary dependency: 'data'. Either exclude it or remove the dependency array. Outer scope values like 'data' aren't valid dependencies because mutating them doesn't re-render the component.",["110"],"'combine' is defined but never used.","'searchBarState' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [debounceSearchTerm, getListOfCities]",{"range":"123","text":"124"},"Update the dependencies array to be: [city, fetchGooglePlace]",{"range":"125","text":"126"},"Update the dependencies array to be: [city, fetchFiveDayWeather, lat, lon]",{"range":"127","text":"128"},"Update the dependencies array to be: [weather, fiveDayWeather, codeArray]",{"range":"129","text":"130"},"Update the dependencies array to be: [data, previous]",{"range":"131","text":"132"},"Update the dependencies array to be: []",{"range":"133","text":"134"},[4733,4753],"[debounceSearchTerm, getListOfCities]",[4839,4845],"[city, fetchGooglePlace]",[4976,4981],"[city, fetchFiveDayWeather, lat, lon]",[5475,5500],"[weather, fiveDayWeather, codeArray]",[506,512],"[data, previous]",[630,636],"[]"]